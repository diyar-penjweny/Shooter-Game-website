<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Advanced 2D Shooter</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        body {
            font-family: "Inter", sans-serif;
            background-color: #1a202c; /* Dark background */
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            margin: 0;
            overflow: hidden; /* Prevent scrollbars */
        }
        .game-wrapper {
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 16px;
            padding: 20px;
            background-color: #202b38;
            border-radius: 16px;
            box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.2), 0 10px 10px -5px rgba(0, 0, 0, 0.1);
        }
        canvas {
            background-color: #2d3748; /* Slightly lighter dark background for game area */
            display: block;
            border-radius: 12px; /* Rounded corners for canvas */
            box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
            max-width: 90vw; /* Responsive width */
            max-height: 80vh; /* Responsive height */
            aspect-ratio: 16 / 9; /* Maintain aspect ratio */
            position: relative; /* For background scrolling */
            overflow: hidden;
        }
        .game-info {
            display: flex;
            justify-content: space-between;
            width: 100%;
            max-width: 800px;
            color: #e2e8f0; /* Light text color */
            font-size: 1.125rem; /* text-lg */
            font-weight: 600; /* font-semibold */
        }
        .game-info > div {
            padding: 8px 16px;
            background-color: #4a5568; /* Darker gray for info boxes */
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }
        .game-overlay {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.85); /* Darker overlay */
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            color: white;
            font-size: 2rem;
            text-align: center;
            border-radius: 12px;
            z-index: 10; /* Ensure it's above the canvas */
        }
        .game-overlay h2 {
            font-size: 3.5rem; /* Larger title */
            margin-bottom: 25px;
            color: #48bb78; /* Green for win */
            text-shadow: 0 0 10px rgba(72, 187, 120, 0.7); /* Glow effect */
        }
        .game-overlay.lose h2 {
            color: #ef4444; /* Red for lose */
            text-shadow: 0 0 10px rgba(239, 68, 68, 0.7);
        }
        .game-overlay p {
            font-size: 1.25rem;
            margin-bottom: 30px;
            max-width: 70%;
        }
        .game-overlay button {
            padding: 14px 30px; /* Larger button */
            font-size: 1.6rem;
            background-image: linear-gradient(to right, #38a169, #48bb78); /* Gradient button */
            color: white;
            border: none;
            border-radius: 10px; /* More rounded */
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
            position: relative;
            overflow: hidden;
        }
        .game-overlay button:hover {
            background-image: linear-gradient(to right, #2f855a, #38a169);
            transform: translateY(-3px);
            box-shadow: 0 8px 20px rgba(0, 0, 0, 0.4);
        }
        .game-overlay button:active {
            transform: translateY(0);
            box-shadow: 0 3px 10px rgba(0, 0, 0, 0.2);
        }
        .game-overlay button::after { /* Bubble effect on hover */
            content: '';
            position: absolute;
            top: 50%;
            left: 50%;
            width: 5px;
            height: 5px;
            background: rgba(255, 255, 255, 0.5);
            opacity: 0;
            border-radius: 50%;
            transform: scale(1) translate(-50%, -50%);
            transition: all 0.5s ease-out;
        }
        .game-overlay button:hover::after {
            transform: scale(20) translate(-50%, -50%);
            opacity: 1;
        }

        /* Background stars for scrolling effect */
        .star {
            position: absolute;
            background-color: white;
            border-radius: 50%;
            opacity: 0; /* Hidden initially */
            animation: twinkle 4s infinite ease-in-out;
        }

        @keyframes twinkle {
            0%, 100% { opacity: 0; }
            50% { opacity: 0.8; }
        }
    </style>
</head>
<body>
    <div class="game-wrapper">
        <div class="game-info">
            <div id="scoreDisplay">Score: 0</div>
            <div id="healthDisplay">Health: 100</div>
            <div id="waveDisplay">Wave: 1</div>
        </div>
        <canvas id="gameCanvas"></canvas>

        <div id="gameOverlay" class="game-overlay">
            <h2 id="overlayTitle">Advanced 2D Shooter</h2>
            <p id="overlayMessage">
                Press 'W', 'A', 'S', 'D' or Arrow Keys to move.<br>
                Click to shoot. Survive the waves of enemies!
            </p>
            <button id="startButton">Start Game</button>
        </div>
    </div>

    <script>
        // --- Game Setup ---
        const canvas = document.getElementById('gameCanvas');
        const ctx = canvas.getContext('2d');

        // UI elements
        const scoreDisplay = document.getElementById('scoreDisplay');
        const healthDisplay = document.getElementById('healthDisplay');
        const waveDisplay = document.getElementById('waveDisplay');
        const gameOverlay = document.getElementById('gameOverlay');
        const overlayTitle = document.getElementById('overlayTitle');
        const overlayMessage = document.getElementById('overlayMessage');
        const startButton = document.getElementById('startButton');

        // Game state variables
        let gameRunning = false;
        let score = 0;
        let playerHealth = 100;
        let currentWave = 1;
        let enemiesToSpawnThisWave = 0;
        let enemiesSpawnedThisWave = 0;
        let enemiesDefeatedThisWave = 0;
        let waveStartTime = 0;
        let animationFrameId;
        let backgroundScrollY = 0;
        const backgroundScrollSpeed = 0.5; // Pixels per frame

        // Player properties
        const player = {
            x: 0,
            y: 0,
            width: 40,
            height: 40,
            speed: 5,
            color: '#4299e1', // Blue
            dx: 0, // direction x
            dy: 0, // direction y
            shootCooldown: 200, // milliseconds
            lastShotTime: 0,
            fireRateMultiplier: 1, // For power-ups
            shielded: false,
            shieldDuration: 0,
            shieldColor: 'rgba(144, 202, 249, 0.5)' // Light blue transparent
        };

        // Arrays for game objects
        let projectiles = [];
        let enemies = [];
        let powerUps = [];
        let explosions = [];

        // --- Audio Context and Sounds (Tone.js is not available in this environment, using simple Audio objects) ---
        const audioContext = new (window.AudioContext || window.webkitAudioContext)();

        function playSound(frequency, duration, type = 'sine', volume = 0.1) {
            const oscillator = audioContext.createOscillator();
            const gainNode = audioContext.createGain();

            oscillator.type = type;
            oscillator.frequency.setValueAtTime(frequency, audioContext.currentTime);
            gainNode.gain.setValueAtTime(volume, audioContext.currentTime);

            oscillator.connect(gainNode);
            gainNode.connect(audioContext.destination);

            oscillator.start();
            oscillator.stop(audioContext.currentTime + duration / 1000);
        }

        // --- Game Utility Functions ---

        /**
         * Resizes the canvas to fit the window and updates player position.
         */
        function resizeCanvas() {
            canvas.width = Math.min(window.innerWidth * 0.8, 1000); // Max width 1000px
            canvas.height = Math.min(window.innerHeight * 0.7, 600); // Max height 600px
            // Center player on resize
            player.x = canvas.width / 2 - player.width / 2;
            player.y = canvas.height - player.height - 20;
        }

        /**
         * Generates a random integer between min (inclusive) and max (inclusive).
         * @param {number} min - The minimum value.
         * @param {number} max - The maximum value.
         * @returns {number} A random integer.
         */
        function getRandomInt(min, max) {
            return Math.floor(Math.random() * (max - min + 1)) + min;
        }

        /**
         * Checks for collision between two rectangles.
         * @param {object} rect1 - First rectangle {x, y, width, height}.
         * @param {object} rect2 - Second rectangle {x, y, width, height}.
         * @returns {boolean} True if rectangles overlap, false otherwise.
         */
        function checkCollision(rect1, rect2) {
            return rect1.x < rect2.x + rect2.width &&
                   rect1.x + rect1.width > rect2.x &&
                   rect1.y < rect2.y + rect2.height &&
                   rect1.y + rect1.height > rect2.y;
        }

        // --- Game Object Classes (simplified for direct use in script) ---

        /**
         * Base class for moving entities.
         */
        class Entity {
            constructor(x, y, width, height, color, speed) {
                this.x = x;
                this.y = y;
                this.width = width;
                this.height = height;
                this.color = color;
                this.speed = speed;
            }

            draw() {
                ctx.fillStyle = this.color;
                ctx.fillRect(this.x, this.y, this.width, this.height);
            }
        }

        class Projectile extends Entity {
            constructor(x, y, targetX, targetY, color, isPlayerProjectile, damage) {
                super(x, y, 10, 10, color, 10); // Projectiles are 10x10
                this.radius = 5;
                this.isPlayerProjectile = isPlayerProjectile;
                this.damage = damage;

                // Calculate direction vector
                const angle = Math.atan2(targetY - y, targetX - x);
                this.dx = Math.cos(angle) * this.speed;
                this.dy = Math.sin(angle) * this.speed;
            }

            draw() {
                ctx.beginPath();
                ctx.arc(this.x + this.radius, this.y + this.radius, this.radius, 0, Math.PI * 2);
                ctx.fillStyle = this.color;
                ctx.fill();
                ctx.closePath();
            }

            update() {
                this.x += this.dx;
                this.y += this.dy;
            }
        }

        class Enemy extends Entity {
            constructor(type) {
                let x, y, width, height, speed, health, color, shootCooldown;
                let dropsPowerUp = false;

                if (type === 'basic') {
                    width = getRandomInt(30, 50);
                    height = getRandomInt(30, 50);
                    speed = getRandomInt(1, 2);
                    health = getRandomInt(30, 60);
                    color = '#e53e3e'; // Red
                    shootCooldown = getRandomInt(1500, 3000);
                } else if (type === 'fast') {
                    width = getRandomInt(25, 40);
                    height = getRandomInt(25, 40);
                    speed = getRandomInt(3, 5);
                    health = getRandomInt(20, 40);
                    color = '#ecc94b'; // Yellow
                    shootCooldown = getRandomInt(1000, 2000);
                } else if (type === 'tank') {
                    width = getRandomInt(50, 70);
                    height = getRandomInt(50, 70);
                    speed = getRandomInt(0.5, 1.5);
                    health = getRandomInt(80, 150);
                    color = '#805ad5'; // Purple
                    shootCooldown = getRandomInt(2000, 4000);
                    dropsPowerUp = true; // Tank enemies have a higher chance to drop power-ups
                }

                x = getRandomInt(0, canvas.width - width);
                y = -height; // Start above canvas

                super(x, y, width, height, color, speed);
                this.type = type;
                this.health = health;
                this.maxHealth = health;
                this.shootCooldown = shootCooldown;
                this.lastShotTime = Date.now();
                this.dropsPowerUp = dropsPowerUp;
            }

            draw() {
                super.draw();
                // Draw health bar
                const healthBarWidth = this.width;
                const healthBarHeight = 5;
                const healthPercentage = this.health / this.maxHealth;
                ctx.fillStyle = 'red';
                ctx.fillRect(this.x, this.y - healthBarHeight - 2, healthBarWidth, healthBarHeight);
                ctx.fillStyle = 'lime';
                ctx.fillRect(this.x, this.y - healthBarHeight - 2, healthBarWidth * healthPercentage, healthBarHeight);
            }

            update(playerX, playerY) {
                // Simple enemy movement: move towards player's X, then down
                if (this.x < playerX) {
                    this.x += Math.min(this.speed, playerX - this.x);
                } else if (this.x > playerX) {
                    this.x -= Math.min(this.speed, this.x - playerX);
                }
                this.y += this.speed * 0.5; // Move downwards slowly

                // Enemies shoot at player
                if (Date.now() - this.lastShotTime > this.shootCooldown) {
                    projectiles.push(new Projectile(this.x + this.width / 2, this.y + this.height, playerX, playerY, 'orange', false, 15));
                    this.lastShotTime = Date.now();
                }
            }

            takeDamage(amount) {
                this.health -= amount;
                if (this.health < 0) {
                    this.health = 0;
                }
                playSound(200, 50, 'square', 0.2); // Hit sound
            }

            isAlive() {
                return this.health > 0;
            }
        }

        class PowerUp extends Entity {
            constructor(x, y, type) {
                super(x, y, 20, 20, '#a0aec0', 2); // Gray base color
                this.type = type;
                this.color = this.getPowerUpColor(type);
            }

            getPowerUpColor(type) {
                switch(type) {
                    case 'fire_rate': return '#f6ad55'; // Orange
                    case 'shield': return '#63b3ed';    // Light blue
                    case 'health': return '#48bb78';    // Green
                    default: return '#a0aec0';
                }
            }

            draw() {
                ctx.fillStyle = this.color;
                ctx.fillRect(this.x, this.y, this.width, this.height);
                ctx.fillStyle = 'white';
                ctx.font = '16px Arial';
                ctx.textAlign = 'center';
                ctx.textBaseline = 'middle';
                let symbol = '';
                switch(this.type) {
                    case 'fire_rate': symbol = 'F'; break;
                    case 'shield': symbol = 'S'; break;
                    case 'health': symbol = '+'; break;
                }
                ctx.fillText(symbol, this.x + this.width / 2, this.y + this.height / 2);
            }

            update() {
                this.y += this.speed;
            }

            applyEffect(player) {
                let message = '';
                switch(this.type) {
                    case 'fire_rate':
                        player.fireRateMultiplier = 0.5; // Double fire rate
                        player.shootCooldown = 100;
                        setTimeout(() => {
                            player.fireRateMultiplier = 1;
                            player.shootCooldown = 200;
                            console.log("Fire rate boost ended.");
                        }, 5000); // 5 seconds duration
                        message = "Fire rate boosted!";
                        playSound(800, 100, 'triangle', 0.3); // Power-up sound
                        break;
                    case 'shield':
                        player.shielded = true;
                        player.shieldDuration = Date.now() + 7000; // 7 seconds duration
                        message = "Shield activated!";
                        playSound(1000, 150, 'sine', 0.3); // Shield sound
                        break;
                    case 'health':
                        player.health = Math.min(player.max_health, player.health + 25);
                        message = "Health restored!";
                        playSound(600, 100, 'square', 0.3); // Health sound
                        break;
                }
                console.log(message);
                return message;
            }
        }

        class Explosion {
            constructor(x, y, size, color) {
                this.x = x;
                this.y = y;
                this.size = size;
                this.color = color;
                this.frame = 0;
                this.maxFrames = 10; // How many frames the explosion lasts
            }

            draw() {
                const currentSize = this.size * (this.frame / this.maxFrames);
                const opacity = 1 - (this.frame / this.maxFrames);
                ctx.fillStyle = `rgba(${this.color[0]}, ${this.color[1]}, ${this.color[2]}, ${opacity})`;
                ctx.beginPath();
                ctx.arc(this.x, this.y, currentSize / 2, 0, Math.PI * 2);
                ctx.fill();
            }

            update() {
                this.frame++;
            }

            isFinished() {
                return this.frame >= this.maxFrames;
            }
        }

        // --- Game Loop and Updates ---

        /**
         * Updates all game objects' positions and states.
         */
        function updateGame() {
            // Update background scroll
            backgroundScrollY = (backgroundScrollY + backgroundScrollSpeed) % canvas.height;

            // Update player position
            player.x += player.dx;
            player.y += player.dy;

            // Keep player within canvas bounds
            if (player.x < 0) player.x = 0;
            if (player.x + player.width > canvas.width) player.x = canvas.width - player.width;
            if (player.y < 0) player.y = 0;
            if (player.y + player.height > canvas.height) player.y = canvas.height - player.height;

            // Update projectiles
            projectiles = projectiles.filter(p => {
                p.update();
                // Remove projectiles that are off-screen
                return p.x > -p.width && p.x < canvas.width + p.width &&
                       p.y > -p.height && p.y < canvas.height + p.height;
            });

            // Update enemies and spawn new ones
            const currentTime = Date.now();
            if (enemiesSpawnedThisWave < enemiesToSpawnThisWave && currentTime - waveStartTime > (enemiesSpawnedThisWave * (2000 - currentWave * 50))) { // Faster spawning in later waves
                let enemyType = 'basic';
                if (currentWave >= 2 && getRandomInt(0, 100) < 30) { // 30% chance for fast enemy from wave 2
                    enemyType = 'fast';
                }
                if (currentWave >= 3 && getRandomInt(0, 100) < 20) { // 20% chance for tank enemy from wave 3
                    enemyType = 'tank';
                }
                enemies.push(new Enemy(enemyType));
                enemiesSpawnedThisWave++;
                waveStartTime = currentTime; // Reset spawn timer for next enemy
            }

            enemies = enemies.filter(enemy => {
                enemy.update(player.x + player.width / 2, player.y + player.height / 2);
                // Remove enemies that are off-screen or defeated
                return enemy.y < canvas.height + enemy.height && enemy.isAlive();
            });

            // Update power-ups
            powerUps = powerUps.filter(pu => {
                pu.update();
                return pu.y < canvas.height; // Remove if off-screen
            });

            // Update explosions
            explosions = explosions.filter(exp => {
                exp.update();
                return !exp.isFinished();
            });

            // --- Collision Detection ---

            // Player Projectile vs Enemy
            projectiles.forEach((p, pIndex) => {
                if (p.isPlayerProjectile) {
                    enemies.forEach((e, eIndex) => {
                        if (e.isAlive() && checkCollision(p, e)) {
                            e.takeDamage(p.damage);
                            projectiles.splice(pIndex, 1); // Remove projectile
                            score += 10; // Increase score for hit
                            if (!e.isAlive()) {
                                score += 50; // Bonus for defeating enemy
                                enemiesDefeatedThisWave++;
                                explosions.push(new Explosion(e.x + e.width / 2, e.y + e.height / 2, Math.max(e.width, e.height) * 1.5, [255, 165, 0])); // Orange explosion
                                playSound(100, 150, 'sawtooth', 0.4); // Explosion sound

                                // Drop power-up
                                if (e.dropsPowerUp || getRandomInt(0, 100) < 15) { // 15% chance for any enemy to drop
                                    const powerUpTypes = ['fire_rate', 'shield', 'health'];
                                    const randomType = powerUpTypes[getRandomInt(0, powerUpTypes.length - 1)];
                                    powerUps.push(new PowerUp(e.x + e.width / 2 - 10, e.y + e.height / 2 - 10, randomType));
                                }
                            }
                        }
                    });
                }
            });

            // Enemy Projectile vs Player
            projectiles.forEach((p, pIndex) => {
                if (!p.isPlayerProjectile) {
                    if (checkCollision(p, player)) {
                        if (!player.shielded) {
                            playerHealth -= p.damage;
                            playSound(150, 70, 'triangle', 0.2); // Player hit sound
                        } else {
                            console.log("Shield blocked damage!");
                            playSound(1200, 50, 'sine', 0.3); // Shield block sound
                        }
                        projectiles.splice(pIndex, 1); // Remove projectile
                    }
                }
            });

            // Enemy vs Player (direct collision)
            enemies.forEach(e => {
                if (e.isAlive() && checkCollision(player, e)) {
                    if (!player.shielded) {
                        playerHealth -= 2; // Continuous damage on contact
                        playSound(150, 70, 'triangle', 0.2); // Player hit sound
                    } else {
                        console.log("Shield blocked collision damage!");
                        playSound(1200, 50, 'sine', 0.3); // Shield block sound
                    }
                }
            });

            // Player vs Power-up
            powerUps.forEach((pu, puIndex) => {
                if (checkCollision(player, pu)) {
                    pu.applyEffect(player);
                    powerUps.splice(puIndex, 1); // Remove power-up
                }
            });

            // Update shield status
            if (player.shielded && Date.now() > player.shieldDuration) {
                player.shielded = false;
                console.log("Shield deactivated.");
            }

            // Update UI
            scoreDisplay.textContent = `Score: ${score}`;
            healthDisplay.textContent = `Health: ${playerHealth}`;
            waveDisplay.textContent = `Wave: ${currentWave}`;

            // Check wave completion
            if (enemiesDefeatedThisWave >= enemiesToSpawnThisWave && enemies.length === 0) {
                startNextWave();
            }

            // Check game over
            if (playerHealth <= 0) {
                endGame(false); // Player lost
            }
        }

        /**
         * Draws all game objects on the canvas.
         */
        function drawGame() {
            ctx.clearRect(0, 0, canvas.width, canvas.height); // Clear canvas

            // Draw scrolling background (simple stars)
            ctx.fillStyle = '#1a202c'; // Dark background for the canvas
            ctx.fillRect(0, 0, canvas.width, canvas.height);

            // Draw stars (simple dots for now)
            for (let i = 0; i < 50; i++) {
                const starX = (i * 15 + backgroundScrollY * 0.1) % canvas.width; // Slower horizontal scroll
                const starY = (i * 10 + backgroundScrollY) % canvas.height;
                ctx.fillStyle = 'rgba(255, 255, 255, ' + (0.3 + (Math.sin(i + backgroundScrollY * 0.05) * 0.3)) + ')'; // Twinkle effect
                ctx.beginPath();
                ctx.arc(starX, starY, 1 + (Math.sin(i + backgroundScrollY * 0.02) * 0.5), 0, Math.PI * 2); // Vary size
                ctx.fill();
            }

            // Draw player
            ctx.fillStyle = player.color;
            ctx.fillRect(player.x, player.y, player.width, player.height);

            // Draw player shield if active
            if (player.shielded) {
                ctx.fillStyle = player.shieldColor;
                ctx.beginPath();
                ctx.arc(player.x + player.width / 2, player.y + player.height / 2, player.width * 0.8, 0, Math.PI * 2);
                ctx.fill();
                ctx.strokeStyle = '#90caf9'; // Lighter blue outline
                ctx.lineWidth = 2;
                ctx.stroke();
            }

            // Draw projectiles
            projectiles.forEach(p => p.draw());

            // Draw enemies
            enemies.forEach(e => e.draw());

            // Draw power-ups
            powerUps.forEach(pu => pu.draw());

            // Draw explosions
            explosions.forEach(exp => exp.draw());
        }

        /**
         * Main animation loop.
         */
        function animate() {
            if (!gameRunning) return;

            updateGame();
            drawGame();

            animationFrameId = requestAnimationFrame(animate);
        }

        /**
         * Starts a new game.
         */
        function startGame() {
            // Reset game state
            score = 0;
            playerHealth = 100;
            currentWave = 0; // Will be incremented to 1 by startNextWave
            projectiles = [];
            enemies = [];
            powerUps = [];
            explosions = [];
            player.x = canvas.width / 2 - player.width / 2;
            player.y = canvas.height - player.height - 20;
            player.dx = 0;
            player.dy = 0;
            player.fireRateMultiplier = 1;
            player.shootCooldown = 200;
            player.shielded = false;
            player.shieldDuration = 0;

            // Hide overlay and start game
            gameOverlay.style.display = 'none';
            gameRunning = true;
            if (animationFrameId) {
                cancelAnimationFrame(animationFrameId); // Cancel any previous animation frame
            }
            startNextWave(); // Start the first wave
            animate();
        }

        /**
         * Starts the next wave of enemies.
         */
        function startNextWave() {
            currentWave++;
            enemiesToSpawnThisWave = 5 + (currentWave * 2); // More enemies each wave
            enemiesSpawnedThisWave = 0;
            enemiesDefeatedThisWave = 0;
            waveStartTime = Date.now();
            console.log(`Starting Wave ${currentWave} with ${enemiesToSpawnThisWave} enemies!`);
            overlayTitle.textContent = `Wave ${currentWave} Incoming!`;
            overlayMessage.textContent = `Prepare for ${enemiesToSpawnThisWave} enemies!`;
            gameOverlay.style.display = 'flex';
            startButton.style.display = 'none'; // Hide start button during wave intro
            setTimeout(() => {
                gameOverlay.style.display = 'none';
                startButton.style.display = 'block'; // Show it again for game over
            }, 2000); // Show wave intro for 2 seconds
        }

        /**
         * Ends the game and displays the result.
         * @param {boolean} won - True if the player won, false otherwise.
         */
        function endGame(won) {
            gameRunning = false;
            cancelAnimationFrame(animationFrameId); // Stop the animation loop

            gameOverlay.style.display = 'flex';
            startButton.style.display = 'block'; // Ensure button is visible
            if (won) {
                overlayTitle.textContent = 'You Win!';
                overlayTitle.classList.remove('lose');
                overlayTitle.classList.add('win');
                overlayMessage.textContent = `Congratulations! You survived all waves and reached a score of ${score}!`;
            } else {
                overlayTitle.textContent = 'Game Over!';
                overlayTitle.classList.remove('win');
                overlayTitle.classList.add('lose');
                overlayMessage.textContent = `Your score: ${score}. You survived ${currentWave - 1} waves. Better luck next time!`;
            }
            startButton.textContent = 'Play Again';
        }

        // --- Event Listeners ---

        // Resize canvas on window resize
        window.addEventListener('resize', resizeCanvas);

        // Player movement input
        const keys = {};
        window.addEventListener('keydown', (e) => {
            keys[e.key.toLowerCase()] = true;
            // Prevent default scroll behavior for arrow keys
            if (['arrowup', 'arrowdown', 'arrowleft', 'arrowright', 'w', 'a', 's', 'd'].includes(e.key.toLowerCase())) {
                e.preventDefault();
            }
            updatePlayerMovement();
        });
        window.addEventListener('keyup', (e) => {
            keys[e.key.toLowerCase()] = false;
            updatePlayerMovement();
        });

        /**
         * Updates player's direction based on pressed keys.
         */
        function updatePlayerMovement() {
            player.dx = 0;
            player.dy = 0;
            if (keys['arrowleft'] || keys['a']) player.dx = -player.speed;
            if (keys['arrowright'] || keys['d']) player.dx = player.speed;
            if (keys['arrowup'] || keys['w']) player.dy = -player.speed;
            if (keys['arrowdown'] || keys['s']) player.dy = player.speed;
        }

        // Player shooting input (mouse click)
        canvas.addEventListener('mousedown', (e) => {
            if (!gameRunning) return;

            const currentTime = Date.now();
            if (currentTime - player.lastShotTime > player.shootCooldown) {
                const rect = canvas.getBoundingClientRect();
                const mouseX = e.clientX - rect.left;
                const mouseY = e.clientY - rect.top;

                projectiles.push(new Projectile(
                    player.x + player.width / 2 - 5, // Adjust for projectile width
                    player.y + player.height / 2 - 5, // Adjust for projectile height
                    mouseX,
                    mouseY,
                    'cyan', // Player projectile color
                    true,
                    20 // Player projectile damage
                ));
                player.lastShotTime = currentTime;
                playSound(440, 50, 'sine', 0.1); // Shoot sound
            }
        });

        // Start button click
        startButton.addEventListener('click', startGame);

        // Initial setup
        resizeCanvas(); // Set initial canvas size and player position
        // Display initial overlay
        gameOverlay.style.display = 'flex';
        overlayTitle.textContent = 'Advanced 2D Shooter';
        overlayMessage.innerHTML = "Press 'W', 'A', 'S', 'D' or Arrow Keys to move.<br>Click to shoot. Survive the waves of enemies!";
        startButton.textContent = 'Start Game';

        // Ensure the animation loop is started after getting the window onload event.
        window.onload = function () {
            // No need to call animate() here as it's called by startGame()
            // when the button is clicked.
        }
    </script>
</body>
</html>
